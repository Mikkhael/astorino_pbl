.PROGRAM moin
   ; Configuration
   TOOL 2
   PinIdle = 1
   PinAck  = 2
   PinGrab = 3
   PinCmdA = 1001
   PinCmdB = 1002
   PinSend = 1008
   DefaultSpeed  = 20
   DefaultSpeedL = 10
   ; Variables Init
   CmdWordA = 0
   CurrentBitPower = 1
   unknown = 1
   alt = 1
   dummy = 1
   ; Receiving Command
   SIGNAL  2    ; Set Ack  to 0
   SIGNAL -1    ; Set Idle to 1
   SIGNAL  2001 ; Waiting for command
   FOR bit = 0 TO 8
      alt = 0-alt
      awaitsend = (1+alt)/2
      SIGNAL 2002 ; Waiting for next Part
      WHILE ((SIG(1008)) == awaitsend) DO
         dummy = 1 - dummy
         TWAIT 0.2
      END
      SIGNAL -2002 ; Received Next Part
      SIGNAL 1 ; Set Idle to 0
      ValueA = 0 + (SIG(1001))
      ValueB = 0 + (SIG(1002))
      CmdWordA = CmdWordA + ValueA * CurrentBitPower * 1
      CmdWordA = CmdWordA + ValueB * CurrentBitPower * 2
      CurrentBitPower = CurrentBitPower * 4
      SIGNAL 2*alt ; Set Ack
   END
   SIGNAL -2001 ; Received Full Command
   ; Main Program
   ; Parsing commands
   StorageOffset = 0
   ForceGrabber = 0 ; 0 none, 1 on, 2 off
   ;V 0 none, 1 bottom, 2 top, 3 both
   ;V 10 storage, 20 table, 30 done, 40 dispose
   ActionTake  = 0
   ActionPut   = 0 
   BeforeTake  = 0 ; 0 none, 1 MidTable
   BeforePut   = 0 ; 0 none, 1 MidTable, 2 MidDone, 3 MidTable HOME MidDone
   BeforeEnd   = 0 ; 0 none, 1 MidTable HOME, 2 MidDone HOME, 3 HOME
   ; Main Commands
   ; Bottom from Storage to Table
   IF (CmdWordA < 5) THEN
      StorageOffset = CmdWordA
      BeforeTake = 0
      ActionTake = 11
      BeforePut  = 1
      ActionPut  = 21
      BeforeEnd  = 1
   END
   ; Top from Storage to Assemble
   IF ((CmdWordA >= 5) * (CmdWordA < 10)) THEN
      StorageOffset = CmdWordA - 5
      BeforeTake = 0
      ActionTake = 12
      BeforePut  = 1
      ActionPut  = 22
      BeforeEnd  = 1
   END
   ; Both from Table to Done
   IF ((CmdWordA >= 10) * (CmdWordA < 14)) THEN
      BeforeTake = 1
      ActionTake = 23
      BeforePut  = 3
      ActionPut  = 33
      BeforeEnd  = 2
   END
   ; Discard
   IF ((CmdWordA >= 15) * (CmdWordA < 20)) THEN
      BeforeTake = 1
      ; Bottom from Table to Discard
      IF (CmdWordA == 15) THEN
         ActionTake = 21
         ActionPut  = 41
      END
      ; Top Assembled from Table to Discard
      IF (CmdWordA == 16) THEN
         ActionTake = 22
         ActionPut  = 42
      END
      ; Both from Table to Discard
      IF (CmdWordA == 17) THEN
         ActionTake = 23
         ActionPut  = 43
      END
      BeforePut  = 3
      BeforeEnd  = 2
   END
   ; Additional Commands
   ; Grabber
   IF (CmdWordA == 50) THEN
      ForceGrabber = 1
   END
   IF (CmdWordA == 51) THEN
      ForceGrabber = 2
   END
   ; Take Storage
   IF ((CmdWordA >= 100) * (CmdWordA < 105)) THEN
      StorageOffset = (CmdWordA - 100)
      ActionTake = 11
      BeforeEnd  = 3
   END
   IF ((CmdWordA >= 105) * (CmdWordA < 110)) THEN
      StorageOffset = (CmdWordA - 105)
      ActionTake = 12
      BeforeEnd  = 3
   END
   ; Take Table
   IF ((CmdWordA >= 110) * (CmdWordA < 113)) THEN
      BeforeTake = 1
      ActionTake = 20 + (CmdWordA - 109)
      BeforeEnd  = 1
   END
   ; Put Table
   IF ((CmdWordA >= 120) * (CmdWordA < 123)) THEN
      BeforePut  = 1
      ActionPut  = 20 + (CmdWordA - 119)
      BeforeEnd  = 1
   END
   ; Discard
   IF ((CmdWordA >= 130) * (CmdWordA < 133)) THEN
      BeforePut = 2
      ActionPut  = 40 + (CmdWordA - 129)
      BeforeEnd  = 2
   END
   ; Done
   IF ((CmdWordA >= 140) * (CmdWordA < 143)) THEN
      BeforePut = 2
      ActionPut  = 30 + (CmdWordA - 139)
      BeforeEnd  = 2
   END
   ; Log Command
   logB = 90000
   logC = 90000
   
   logB = logB + BeforeTake * 1
   logB = logB + BeforePut  * 10
   logB = logB + BeforeEnd  * 100
   logB = logB + StorageOffste  * 1000
   
   logC = logC + ActionTake * 1
   logC = logC + ActionPut  * 100
   TWAIT 0.1
   PRINT CmdWordA
   TWAIT 0.1
   PRINT logB
   TWAIT 0.1
   PRINT logC
   
   ; Hadnle Commands
   ; Setting Speed
   SPEED DefaultSpeed
   SPEED DefaultSpeedL MM/S 
   ; Setting approach distances
   StorageApp = 50
   TableApp   = 50
   AssembleApp= 30
   DisposeApp = 1
   DoneApp    = 50
   
   ; Grabber
   IF (ForceGrabber == 1) THEN
      SIGNAL 3
      unknown = 0
   END
   IF (ForceGrabber == 2) THEN
      SIGNAL -3
      unknown = 0
   END
   
   ; Take
   POINT TakeDest = P0
   TakeApp = 0
   IF (ActionTake > 0) THEN
      SIGNAL 2010 ; Possible Take Error
   END
   
   ; Take Storage
   IsTakingFromStorage = 0
   IF ((ActionTake > 10) * (ActionTake < 23) * (StorageOffset < 4)) THEN
      SIGNAL -2010 ; No Take Error
      TakeApp = StorageApp
      IsTakingFromStorage = 1
      IF (ActionTake == 11) THEN
         IF (StorageOffset == 0) THEN
            POINT TakeDest = P11
         END
         IF (StorageOffset == 1) THEN
            POINT TakeDest = P12
         END
         IF (StorageOffset == 2) THEN
            POINT TakeDest = P13
         END
      END
      IF (ActionTake == 12) THEN
         IF (StorageOffset == 0) THEN
            POINT TakeDest = P14
         END
         IF (StorageOffset == 1) THEN
            POINT TakeDest = P15
         END
         IF (StorageOffset == 2) THEN
            POINT TakeDest = P16
         END
      END
   END
   ; Take Table
   PerformDissassemble = 0
   IF ((ActionTake > 20) * (ActionTake < 24)) THEN
      SIGNAL -2010 ; No Take Error
      TakeApp = TableApp
      IF (ActionTake == 21) THEN
         POINT TakeDest = P20
      END
      IF (ActionTake == 22) THEN
         PerformDissassemble = 1
      END
      IF (ActionTake == 23) THEN
         POINT TakeDest = SHIFT( P22 BY 0,0,-6)
      END
   END
   
   IF ((TakeApp > 0) * ((SIG(2010)) == 0)) THEN
      SIGNAL -3 ; Release Grabber
      IF (BeforeTake == 1) THEN ; Go via midpoint
         JMOVE P26
      END
      IF (PerformDissassemble == 1) THEN ; DISASSEMBLY
         TWAIT 2; TODO
      ELSE ; Simple Take
         JAPPRO TakeDest, TakeApp
         LMOVE TakeDest
         IF (IsTakingFromStorage == 1) THEN ; Shift, to grab from storage
            TDRAW 0,-10,0
         END
         SIGNAL 3 ; Grab
         TWAIT 0.2
         LDEPART TakeApp
      END
      unknown = 0
   END
   
   ; Put
   POINT PutDest = P0
   PutApp = 0
   IF (ActionPut > 0) THEN
      SIGNAL 2011 ; Possible Put Error
   END
   
   ; Put Table
   PerformAssemble = 0
   IF ((ActionPut > 20) * (ActionPut < 23)) THEN
      SIGNAL -2011 ; No Put Error
      PutApp = TableApp
      IF (ActionPut == 21) THEN
         POINT PutDest = P20
      END
      IF (ActionPut == 22) THEN
         PerformAssemble = 1
      END
   END
   ; Put Done
   IF (ActionPut == 33) THEN
      SIGNAL -2011 ; No Put Error
      PutApp = DoneApp
      POINT PutDest = P30
   END
   ; Put Dispose
   IF ((ActionPut > 40) * (ActionPut < 44)) THEN
      SIGNAL -2011 ; No Put Error
      PutApp = DisposeApp
      IF (ActionPut == 41) THEN
         POINT PutDest = P31
      END
      IF (ActionPut == 42) THEN
         POINT PutDest = P32
      END
      IF (ActionPut == 43) THEN
         POINT PutDest = P33
      END
   END
   
   IF ((PutApp > 0) * ((SIG(2010)) == 0)) THEN
      IF (BeforePut == 1) THEN
         JMOVE P26 ; MidTable
      END
      IF (BeforePut == 2) THEN
         JMOVE P25 ; MidDone
      END
      IF (BeforePut == 3) THEN
         JMOVE P26 ; Safe around
         HOME
         JMOVE P25
      END
      IF (PerformAssemble == 1) THEN
         JAPPRO P21, AssembleApp
         SPEED 10
         SPEED 5 MM/S
         LMOVE P21      
         SIGNAL -3 ; Release Top to make it go in
         TWAIT 0.5
         SIGNAL 3  ; Grab Top
         TWAIT 0.5
         JMOVE P22 ; Rotate Top
         TWAIT 0.2
         SIGNAL -3 ; Release Top
         TWAIT 0.2
         SPEED DefaultSpeed
         SPEED DefaultSpeedL MM/S
         LDEPART TableApp
      ELSE
         JAPPRO PutDest, PutApp
         LMOVE PutDest
         SIGNAL -3 ; Release Grabber
         LDEPART PutApp
      END
      unknown = 0
   END
   
   IF (BeforeEnd == 1) THEN
      JMOVE P26 ; MidTable
      HOME
   END
   IF (BeforeEnd == 2) THEN
      JMOVE P25 ; MidDone
      HOME
   END
   IF (BeforeEnd == 3) THEN
      HOME
   END
   
   IF unknown == 1 THEN
      TWAIT 2
   END
   SIGNAL -1 ; Set Idle to 1
.END 
